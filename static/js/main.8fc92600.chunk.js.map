{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResultCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","loginModel","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setIsInitializedAC","removeTaskAC","addTaskAC","task","updateTaskAC","setTasksAC","tasks","updateTaskTC","domainModel","getState","a","state","find","t","console","warn","apiModel","deadline","description","priority","startDate","res","resultCode","err","removeTodolistAC","changeTodolistTitleAC","clearTodosDataAC","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","addTask","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","useEffect","forEach","tl","items","auth","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","alert","JSON","stringify","resetForm","OK","isAxiosError","response","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","handleChange","name","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","action","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fc92600.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ccd72c64-da46-4e68-ace8-41333a566ebf'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(loginModel: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>\r\n        (`auth/login`, loginModel)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<LoginDataType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\n// export type LoginResponseType <T = {}> = {\r\n//     resultCode: number\r\n//     messages: string[]\r\n//     data: T\r\n// }\r\nexport type LoginDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {\n    setAppErrorAC,\n    SetAppErrorActionType,\n    setAppStatusAC,\n    SetAppStatusActionType\n} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType, ResultCode} from \"../../api/todolists-api\";\nimport axios, {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {clearTodosDataAC, ClearTodosDataActionType} from \"../TodolistsList/todolists-reducer\";\nimport {AppThunk} from \"../../app/store\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n\n// thunks\nexport const loginTC = (loginModel: LoginParamsType): AppThunk => async dispatch => {\n    try {\n        dispatch(setAppStatusAC('loading'))\n        const res = await authAPI.login(loginModel)\n        if (res.data.resultCode === ResultCode.OK) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n\n    } catch (e) {\n        const err = e as Error | AxiosError\n        if (axios.isAxiosError(err)) {\n            const error = err.response?.data\n                ? (err.response.data as ({ error: string })).error\n                : err.message\n            dispatch(setAppErrorAC(error))\n        }\n        dispatch(setAppStatusAC('failed'))\n    }\n}\n\nexport const logoutTC = (): AppThunk => async dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    const res = await authAPI.logout()\n    try {\n        if (res.data.resultCode === ResultCode.OK) {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(clearTodosDataAC())\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (e) {\n        const err = e as Error | AxiosError\n        handleServerNetworkError(err, dispatch)\n    }\n}\n\n// types\ntype InitialStateType = typeof initialState\nexport type AuthActionsType =\n    ReturnType<typeof setIsLoggedInAC>\n    | SetAppStatusActionType\n    | SetAppErrorActionType\n    | ClearTodosDataActionType\n","import {authAPI, ResultCode} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {AppThunk} from \"./store\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = (): AppThunk => async dispatch => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === ResultCode.OK) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setIsInitializedAC(true))\r\n    } else {\r\n        dispatch(setIsInitializedAC(true))\r\n    }\r\n}\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\nexport type AppReducerActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetIsInitializedActionType","import {\r\n    AddTodolistActionType,\r\n    ClearTodosDataActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType, AppThunk} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'CLEAR-DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    dispatch(setTasksAC(tasks, todolistId))\r\n    dispatch(setAppStatusAC('succeeded'))\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunk => async dispatch => {\r\n    await todolistsAPI.deleteTask(todolistId, taskId)\r\n    dispatch(removeTaskAC(taskId, todolistId))\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todolistsAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(addTaskAC(task))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    try {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        handleServerNetworkError(err, dispatch);\r\n    }\r\n}\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ClearTodosDataActionType\r\n\r\n// type ThunkDispatch = Dispatch<TasksActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {AppThunk} from \"../../app/store\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CLEAR-DATA':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const clearTodosDataAC = () => ({type: 'CLEAR-DATA'} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const res = await todolistsAPI.getTodolists()\r\n    dispatch(setTodolistsAC(res.data))\r\n    dispatch(setAppStatusAC('succeeded'))\r\n    const todos = res.data\r\n    todos.forEach(tl => {\r\n        dispatch(fetchTasksTC(tl.id))\r\n    })\r\n}\r\n// export const _fetchTodolistsTC = (): AppThunk => {\r\n//     return (dispatch) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         todolistsAPI.getTodolists()\r\n//             .then((res) => {\r\n//                 dispatch(setTodolistsAC(res.data))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//                 return res.data\r\n//             })\r\n//             .then((todos) => {\r\n//                 todos.forEach(tl => {\r\n//                     dispatch(fetchTasksTC(tl.id))\r\n//                 })\r\n//             })\r\n//     }\r\n// }\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => async dispatch => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatusAC('loading'))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    dispatch(removeTodolistAC(todolistId))\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatusAC('succeeded'))\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    dispatch(addTodolistAC(res.data.data.item))\r\n    dispatch(setAppStatusAC('succeeded'))\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string): AppThunk => async dispatch => {\r\n    await todolistsAPI.updateTodolist(id, title)\r\n    dispatch(changeTodolistTitleAC(id, title))\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ClearTodosDataActionType = ReturnType<typeof clearTodosDataAC>\r\nexport type TodolistsActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ClearTodosDataActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n// type ThunkDispatch = Dispatch<TodolistsActionsType | SetAppStatusActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    // useEffect(() => {\r\n    //     if (demo) {\r\n    //         return\r\n    //     }\r\n    //     const thunk = fetchTasksTC(props.todolist.id)\r\n    //     dispatch(thunk)\r\n    // }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {}\n            if (!values.email) {\n                errors.email = 'Required'\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address'\n            }\n\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 3) {\n                errors.password = 'Invalid password length! It should be more then 3 symbols!'\n            }\n\n            return errors\n        },\n        onSubmit: values => {\n            alert(JSON.stringify(values))\n            formik.resetForm()\n            dispatch(loginTC(values))\n        },\n    })\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                                   onBlur={formik.handleBlur}\n                        />\n                        {formik.touched.email && formik.errors.email ?\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                                   onBlur={formik.handleBlur}\n                        />\n                        {formik.touched.password && formik.errors.password ?\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel label={'Remember me'}\n                                          control={<Checkbox onChange={formik.handleChange}\n                                                             checked={formik.values.rememberMe}\n                                                             name='rememberMe'\n                                          />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const onLogOutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn\r\n                        ? <Button color=\"inherit\" onClick={onLogOutHandler}>Log out</Button>\r\n                        : <Button color=\"inherit\">Log in</Button>\r\n                    }\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import {TasksActionsType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {appReducer, AppReducerActionsType} from './app-reducer'\r\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//все типы экшенов для всего app\r\nexport type AppActionsType = TodolistsActionsType | TasksActionsType | AuthActionsType | AppReducerActionsType;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}